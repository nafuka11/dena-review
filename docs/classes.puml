@startuml classes
set namespaceSeparator none
class "Application" as gui.app.Application #antiquewhite {
  container: ContainerFrame
  create_widgets()
}
class "Board" as logic.board.Board #aquamarine {
  cells: List[List[CellState]]
  connect_length : int
  size: Point
  can_put_cell(pos: Point) -> bool
  has_any_empty_cell() -> bool
  init_cells()
  is_connected(pos: Point) -> bool
  put_cell(x: int, cell: CellState) -> Point
}
class "BoardFrame" as gui.app.BoardFrame #antiquewhite {
  COLOR_BACKGROUND : str
  COLOR_CELL : dict
  COLOR_MESSAGE : str
  FONT_MESSAGE : tuple
  TAG_CELL : str
  TAG_MESSAGE : str
  canvas : Canvas
  display_draw_message()
  display_win_message(winner: str)
  draw_cell(pos: Point, game: ConnectFour, need_create: bool)
  draw_cells(game: ConnectFour)
  redraw_widgets(game: ConnectFour)
}
class "CUIGame" as cui.game.CUIGame #aliceblue {
  game: ConnectFour
  is_player_turn : bool
  run()
}
enum "CellState" as logic.cell.CellState #aquamarine {
  PLAYER
  OPPONENT
  EMPTY
}
class "ConnectFour" as logic.connect_four.ConnectFour #aquamarine {
  board: Board
  connect_length : int
  size: Point
  can_put_cell(x: int) -> bool
  get_cell(x: int, y: int) -> CellState
  init_board()
  judge_draw() -> bool
  judge_win(x: int) -> bool
  put_opponent_cell(x: int) -> Point
  put_player_cell(x: int) -> Point
}
class "ContainerFrame" as gui.app.ContainerFrame #antiquewhite {
  PLAYER_NAME : dict
  board: BoardFrame
  game: ConnectFour
  game_end : bool
  header: HeaderFrame
  is_player_turn : bool
  reset_button : Button
  turn : int
  window_size: Point
  create_board()
  create_header()
  create_reset_button()
  create_widgets()
  handle_click_event(event)
  init_game()
  judge_win_or_draw(x: int)
  proceed_next_turn()
  put_cell(x: int)
  redraw_board()
  redraw_header()
  reset_game()
  reset_game_board()
}
class "GUIGame" as gui.game.GUIGame #antiquewhite {
  run()
}
class "HeaderFrame" as gui.app.HeaderFrame #antiquewhite {
  player_label : Label
  turn_label : Label
  update_widgets(turn: int, player: str)
}
class "Point" as logic.point.Point #aquamarine {
  x : int
  y : int
}
gui.app.Application --- gui.game.GUIGame
gui.app.BoardFrame --* gui.app.ContainerFrame : board
gui.app.ContainerFrame --* gui.app.Application : container
gui.app.HeaderFrame --* gui.app.ContainerFrame : header
logic.board.Board --* logic.connect_four.ConnectFour : board
logic.cell.CellState --* logic.board.Board: cells
logic.connect_four.ConnectFour --* cui.game.CUIGame : game
logic.connect_four.ConnectFour --* gui.app.ContainerFrame : game
logic.point.Point --* gui.app.ContainerFrame : window_size
logic.point.Point --* logic.board.Board : size
logic.point.Point --* logic.connect_four.ConnectFour : size
@enduml
